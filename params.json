{"name":"FeatureToggle","tagline":"","body":"joshuaestes/feature-toggle\r\n==========================\r\n\r\n[![Build Status](https://travis-ci.org/JoshuaEstes/FeatureToggle.png?branch=master)](https://travis-ci.org/JoshuaEstes/FeatureToggle)\r\n\r\nThis library allows you to easily add and modify various features to your code\r\nwhile in development. Please read the information below on instructions on how\r\nto use this library as well as how to customize and add to it for your own needs.\r\n\r\n# Concepts\r\n\r\n* **Features** are all unique and allows you to enable or disable each feature.\r\n* **Toggles** are the logic behind whether a feature is enabled or not.\r\n* **Repositories** allow you to persist features.\r\n\r\n# Installation\r\n\r\nTo install, just add to your `composer.json` file.\r\n\r\n    \"require\": {\r\n        \"joshuaestes/feature-toggle\": \"~0.1\"\r\n    },\r\n\r\n# Usage\r\n\r\n    use JoshuaEstes\\Component\\FeatureToggle\\FeatureBuilder;\r\n\r\n    $feature = FeatureBuilder::create('enable_a_cool_new_feature')\r\n        ->getFeature();\r\n\r\n    if ($feature->isEnabled()) {\r\n        // code for when the feature is enabled\r\n    } else {\r\n        // code for when the feature is disabled\r\n    }\r\n\r\nBy default the feature is disabled. You will need to enabled the\r\nfeature. You are able to do this two different ways.\r\n\r\n    use JoshuaEstes\\Component\\FeatureToggle\\Toggle\\FeatureToggleGeneric;\r\n\r\n    $feature = FeatureBuilder::create('enable_a_cool_new_feature')\r\n        ->setToggle(\r\n            new FeatureToggleGeneric(\r\n                array(\r\n                    'enabled' => true\r\n                )\r\n            )\r\n        )\r\n        ->getFeature();\r\n\r\nThis will now enabled the feature, when you call `isEnabled()` it will return `true`. The\r\nother way to enable a feature is like so:\r\n\r\n    $feature = FeatureBuilder::create('enable_a_cool_new_feature')\r\n        ->getFeature();\r\n\r\n    $feature->setToggle(\r\n        new FeatureToggleGeneric(\r\n            array(\r\n                'enabled' => true\r\n            )\r\n        )\r\n    );\r\n\r\n# Feature Container\r\n\r\nThe feature container is used to put all your features into one place where you\r\ncan easily loop through them.\r\n\r\n    use JoshuaEstes\\Component\\FeatureToggle\\FeatureContainer;\r\n    use JoshuaEstes\\Component\\FeatureToggle\\Feature;\r\n\r\n    $container = new FeatureContainer();\r\n    $feature = FeatureBuilder::create('enable_a_cool_new_feature')\r\n        ->getFeature();\r\n\r\n    $container->addFeature($feature);\r\n\r\n    $coolNewFeature = $container->getFeature('enable_a_cool_new_feature');\r\n\r\n    $thisIsNull = $container->getFeature('does_not_compute');\r\n\r\n    $thisIsFalse = $container->hasFeature('enable_that_sweet_new_feature');\r\n    $thisIsTrue  = $container->hasFeature('enable_a_cool_new_feature');\r\n\r\n    $numberOfFeatures = count($container);\r\n\r\n    foreach ($container as $f) {\r\n        // @var FeatureInterface $f\r\n        var_dump($f->isEnabled());\r\n    }\r\n\r\nYou can read the source code for more methods that you can call, such as\r\n`removeFeature` and `clearFeatures`.\r\n\r\n# Creating Custom Features\r\n\r\nAll features must implement the [FeatureInterface](https://github.com/JoshuaEstes/FeatureToggle/blob/master/src/JoshuaEstes/Component/FeatureToggle/FeatureInterface.php).\r\n\r\nIn most situations you will only need to use the default `Feature`, however in\r\nsome situations you might want to create your own.\r\n\r\n# Creating Custom Toggles\r\n\r\nAll toggles must implement the [FeatureToggleInterface](https://github.com/JoshuaEstes/FeatureToggle/blob/master/src/JoshuaEstes/Component/FeatureToggle/Toggle/FeatureToggleInterface.php).\r\n\r\nBy creating a custom toggle, you can change the logic for figuring out if a\r\nfeature is enable or not. Some ideas for custom toggles include:\r\n\r\n* IP Based, can enable a feature if the user is on an internal network.\r\n* Username, or something similar.\r\n* Collection, a collection of toggles where it checks for any or all to be enable.\r\n* Gradual, where you can release a feature to x% of a user base.\r\n\r\n## Creating a custom toggle based on username\r\n\r\nYou can create a custom feature toggle with ease.\r\n\r\n    use JoshuaEstes\\Component\\FeatureToggle\\Toggle\\FeatureToggle;\r\n    use JoshuaEstes\\Component\\FeatureToggle\\FeatureInterface;\r\n\r\n    class FeatureToggleUsername extends FeatureToggle\r\n    {\r\n        protected $user;\r\n\r\n        public function setUser($user)\r\n        {\r\n            $this->user = $user;\r\n        }\r\n\r\n        protected function setDefaultOptions(OptionsResolverInterface $resolver)\r\n        {\r\n            $resolver->setRequired(\r\n                array(\r\n                    'username'\r\n                )\r\n            );\r\n        }\r\n\r\n        public function isEnabled(FeatureInterface $feature)\r\n        {\r\n            return $this->options['username'] == $this->user->getUsername();\r\n        }\r\n    }\r\n\r\nNow that we have the toggle, we just need to create the toggle and assign it to\r\na feature object.\r\n\r\n    use JoshuaEstes\\Component\\FeatureToggle\\FeatureBuilder;\r\n\r\n    $toggle = new FeatureToggleUsername(\r\n        array(\r\n            'username' => 'joshua',\r\n        )\r\n    );\r\n    $toggle->setUser($user);\r\n\r\n    $feature = FeatureBuilder::create('enable_for_joshua')\r\n        ->setToggle($toggle)\r\n        ->getFeature();\r\n\r\nThat's all there is to it! Note that the `$user` variable needs to be\r\ndefined and must have a method `getUsername`. This feature will return true\r\nonly for the user with the username `joshua` and will return false for\r\nall other users.\r\n\r\n# Creating Custom Repository\r\n\r\nAll toggles must implement the [RepositoryInterface](https://github.com/JoshuaEstes/FeatureToggle/blob/master/src/JoshuaEstes/Component/FeatureToggle/Repository/RepositoryInterface.php).\r\n\r\nCreating custom repositories allow you to store the states of the features\r\nin anything from a database to a flat file store. Some ideas are:\r\n\r\n* MySQL\r\n* MongoDB\r\n* SQLite\r\n\r\n# Testing\r\n\r\n    php vendor/bin/phing -f build/build.xml phpunit\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}